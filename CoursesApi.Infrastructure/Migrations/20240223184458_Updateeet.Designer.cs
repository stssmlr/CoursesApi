// <auto-generated />
using System;
using CoursesApi.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoursesApi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240223184458_Updateeet")]
    partial class Updateeet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoursesApi.Core.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudonym")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Pseudonym")
                        .IsUnique();

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 29,
                            Email = "bobmarv@hotmail.vom",
                            Name = "Bob",
                            Pseudonym = "Scott Carol",
                            Surname = "Parsons"
                        },
                        new
                        {
                            Id = 2,
                            Age = 27,
                            Email = "carolinalara@hotmail.vom",
                            Name = "Carolina",
                            Pseudonym = "Kristen Josh",
                            Surname = "Lara"
                        },
                        new
                        {
                            Id = 3,
                            Age = 36,
                            Email = "edwinweb@hotmail.vom",
                            Name = "Edwin",
                            Pseudonym = "Tommy Walker",
                            Surname = "Webster"
                        },
                        new
                        {
                            Id = 4,
                            Age = 56,
                            Email = "matashr@hotmail.vom",
                            Name = "Mata",
                            Pseudonym = "Tom Hanks",
                            Surname = "Shibster"
                        },
                        new
                        {
                            Id = 5,
                            Age = 26,
                            Email = "edgarcr@hotmail.vom",
                            Name = "Edgar",
                            Pseudonym = "Lol Tomphson",
                            Surname = "Cringo"
                        });
                });

            modelBuilder.Entity("CoursesApi.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Courses telling you about Languages.",
                            Name = "Languages Courses"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Courses telling you about Sports.",
                            Name = "Sport Courses"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Courses telling you about IT and Programming.",
                            Name = "IT Courses"
                        });
                });

            modelBuilder.Entity("CoursesApi.Core.Entities.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            Description = "Learn English Language",
                            FullText = "Learn English Language To A1-C2 Levels Or Improve Your Skills. We are waiting for your come.",
                            Title = "English Courses"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CategoryId = 1,
                            Description = "Learn German Language",
                            FullText = "Learn German Language To A1-C2 Levels Or Improve Your Skills. We are waiting for your come.",
                            Title = "German Courses"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            CategoryId = 1,
                            Description = "Learn Polish Language",
                            FullText = "Learn Polish Language To A1-C2 Levels Or Improve Your Skills. We are waiting for your come.",
                            Title = "Polish Courses"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            CategoryId = 1,
                            Description = "Learn Chinese Language",
                            FullText = "Learn Chinese Language To A1-C2 Levels Or Improve Your Skills. We are waiting for your come.",
                            Title = "Chinese Courses"
                        });
                });

            modelBuilder.Entity("CoursesApi.Core.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("WhatRequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Browser = "Google",
                            IPAddress = "127.10.11.24:0000",
                            VisitTime = new DateTime(2024, 2, 23, 20, 44, 57, 903, DateTimeKind.Local).AddTicks(7375),
                            WhatRequest = "Course"
                        });
                });

            modelBuilder.Entity("CoursesApi.Core.Entities.Courses", b =>
                {
                    b.HasOne("CoursesApi.Core.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoursesApi.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
